package game.world;

import java.awt.Graphics2D;
import java.awt.image.BufferedImage;
import java.util.HashMap;
import java.util.Map;

import game.render.textures.Texture;
import game.utils.init.InitTextures;

public class Tile {
	

	private static final Texture terrain = new Texture("SpriteMap1");
	private static final Map<Integer, Tile> tileMap = new HashMap<Integer, Tile>();
	public Texture sprite;
	protected boolean solid = true;
	protected int id;
	protected TileType type;
	protected double[] heightMask;
	
	public static final Tile tile1 = new Tile(0xFF000000, new Texture(terrain, 3, 1 , 64 , 64), TileType.SOLID, createSolidArray());
	public static final Tile tile2 = new Tile(0xFFFF0000, new Texture(terrain, 2, 1 , 64, 64), TileType.SLOPE_RIGHT_64_00, /*create64RightArray()*/ createSlopeRightArray(1,64));
	
	
	public static final Tile slope1 = new Tile(-6, setSlopeImage(createSlopeLeftArray(1,16)), TileType.SLOPE_RIGHT_64_00, createSlopeRightArray(1,16));
	public static final Tile slope2 = new Tile(-6, setSlopeImage(createSlopeLeftArray(16,32)), TileType.SLOPE_RIGHT_64_00, createSlopeRightArray(16,32));
	public static final Tile slope3 = new Tile(-6, setSlopeImage(createSlopeLeftArray(32,48)), TileType.SLOPE_RIGHT_64_00, createSlopeRightArray(32,48));
	public static final Tile slope4 = new Tile(-6, setSlopeImage(createSlopeLeftArray(48,64)), TileType.SLOPE_RIGHT_64_00, createSlopeRightArray(48,64));
	
	public static final Tile slope5 = new Tile(-6, setSlopeImage(createSlopeLeftArray(64,48)), TileType.SLOPE_RIGHT_64_00, createSlopeLeftArray(64,48));
	public static final Tile slope6 = new Tile(-6, setSlopeImage(createSlopeLeftArray(32,48)), TileType.SLOPE_RIGHT_64_00, createSlopeLeftArray(32,48));
	public static final Tile slope7 = new Tile(-6, setSlopeImage(createSlopeLeftArray(16,32)), TileType.SLOPE_RIGHT_64_00, createSlopeLeftArray(16,32));
	public static final Tile slope8 = new Tile(-6, setSlopeImage(createSlopeLeftArray(1,16)), TileType.SLOPE_RIGHT_64_00, createSlopeLeftArray(1,16));
	
	public static final Tile air = new Tile(-2, new Texture(terrain, 1, 1 , 64, 64), TileType.AIR, createNoArray());
	public static final Tile tile3 = new Tile(0xFFFFFFFF, new Texture(terrain, 4, 1 , 64, 64), TileType.AIR, createNoArray());
	public static final Tile tile4 = new Tile(0xFF00FFFF, new Texture(terrain, 1, 2 , 64, 64), TileType.SOLID, createSolidArray());
	public static final Tile tile5 = new Tile(0xFF00FF00, new Texture(terrain, 2, 2 , 64, 64), TileType.SOLID, createSolidArray());
	public static final Tile tile6 = new Tile(0xFFF0F0F0, new Texture(terrain, 3, 2 , 64, 64), TileType.SOLID, createSolidArray());
	public static final Tile tile7 = new Tile(0xFF0F0F0F, new Texture(terrain, 4, 2 , 64, 64), TileType.SOLID, createSolidArray());
	public static final Tile tile8 = new Tile(0xFF111111, new Texture(terrain, 1, 3 , 64, 64), TileType.SOLID, createSolidArray());
	public static final Tile tile9 = new Tile(0xFF222222, new Texture(terrain, 2, 3 , 64, 64), TileType.SOLID, createSolidArray());
	
	private Tile(int id, Texture sprite, TileType type, double[] heightMask) {
		this.id = id;
		this.sprite = sprite;
		tileMap.put(id, this);
		solid = true;
		this.type = type;
		this.heightMask = heightMask;
	}
	

	
	public void render(Graphics2D g, int x, int y) {
		sprite.render(g, x, y);
	}
	
	public boolean isSolid() {
		return solid;
	}
	
	public static Tile getFromID(int id) {
		return tileMap.get(id);
	}
	
	public static double[] createSolidArray() {
		double[] arr = new double[64];
		for(int i = 0; i < 64; i++) {
			arr[i] = 64;
		}
		return arr;
	}
	
	public static double[] createNoArray() {
		double[] arr = new double[64];
		for(int i = 0; i < 64; i++) {
			arr[i] = 0;
		}
		return arr;
	}
	
	public static double[] create64RightArray() {
		double[] arr = new double[64];
		for(int i = 0; i < 64; i++) {
			arr[i] = i+1;
		}
		
		//arr[63] = 60;
		
		return arr;
	}
	
	public static double[] createSlopeRightArray(int lower, int upper) {
		double[] arr = new double[64];
		int spacing = 64 / (upper-lower);
		int c = 0;
		for(int i = 0; i < 64; i++) {
			for(int j = 0; j < spacing; j++) {
				if(i+j >= 64) {
					arr[63] = lower + c;
				} else {
					arr[i+j] = lower + c;
				}
			}
			i+= spacing - 1;
			c++;
		}
		return arr;
	}
	
	public static double[] createSlopeLeftArray(int lower, int upper) {
		double[] arr = createSlopeRightArray(lower, upper);
		double[] ar1 = arr.clone();
		for(int i = 0; i < arr.length; i++) {
			ar1[i] = arr[arr.length - i - 1];
		}
		return ar1;
	}
	
	public static Texture setSlopeImage(double[] heightMask) {
		BufferedImage b = tile1.sprite.getImage();
		int[] pixels = b.getRGB(0, 0, b.getWidth(), b.getHeight(), null, 0, b.getWidth());
		BufferedImage b1 = new BufferedImage(b.getWidth(), b.getHeight(), b.getType());
		for(int i = 0; i < b.getWidth(); i++ ) {
			for(int j = b.getHeight() - (int)heightMask[i]; j < b.getHeight() ; j++) {
				b1.setRGB(i, j, pixels[ i + j*b.getWidth()]);
			}
		}
		Texture t = new Texture(terrain, 3, 1 , 64 , 64);
		t.setBufferedImage(b1);
		return t;
	}
}
